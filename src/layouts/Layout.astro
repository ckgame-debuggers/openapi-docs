---
import GlobalFooter from '@/components/ui/footer';
import GlobalHeader from '../components/ui/header';
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <title>Developers - Debuggers</title>
  </head>
  <body>
    <script is:inline>
      (function () {
        const getThemePreference = () => {
          try {
            if (
              typeof localStorage !== 'undefined' &&
              localStorage.getItem('theme')
            ) {
              return localStorage.getItem('theme');
            }
          } catch (e) {}
          return window.matchMedia('(prefers-color-scheme: dark)').matches
            ? 'dark'
            : 'light';
        };
        const isDark = getThemePreference() === 'dark';
        document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

        if (
          typeof MutationObserver !== 'undefined' &&
          typeof localStorage !== 'undefined'
        ) {
          const observer = new MutationObserver(() => {
            const isDark = document.documentElement.classList.contains('dark');
            try {
              localStorage.setItem('theme', isDark ? 'dark' : 'light');
            } catch (e) {}
          });
          observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ['class'],
          });
        }
      })();
    </script>
    <script is:inline>
      (function () {
        // Use window as any to avoid TS errors for ChannelIO properties
        var w = window;
        if (typeof w.ChannelIO !== 'undefined') {
          if (w.console && w.console.error) {
            w.console.error('ChannelIO script included twice.');
          }
          return;
        }
        function ch() {
          ch.c(arguments);
        }
        ch.q = [];
        ch.c = function (args) {
          ch.q.push(args);
        };
        w.ChannelIO = ch;
        function l() {
          if (w.ChannelIOInitialized) {
            return;
          }
          w.ChannelIOInitialized = true;
          var s = document.createElement('script');
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'https://cdn.channel.io/plugin/ch-plugin-web.js';
          var x = document.getElementsByTagName('script')[0];
          if (x && x.parentNode) {
            x.parentNode.insertBefore(s, x);
          }
        }
        if (document.readyState === 'complete') {
          l();
        } else {
          w.addEventListener('DOMContentLoaded', l);
          w.addEventListener('load', l);
        }
      })();
      if (
        typeof window !== 'undefined' &&
        typeof window.ChannelIO === 'function'
      ) {
        window.ChannelIO('boot', {
          pluginKey: '6c85c4e8-3608-4bf8-a39c-64cb5b51e882',
        });
      }
    </script>
    <GlobalHeader client:load />
    <slot />
    <GlobalFooter />
  </body>
</html>
